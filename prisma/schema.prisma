// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  profile_img      String?
  email            String    @unique
  password         String
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  friends          User[]    @relation("Friends")
  friendOf         User[]    @relation("Friends")
  friendRequests   User[]    @relation("FriendRequests")
  friendRequestsOf User[]    @relation("FriendRequests")
  createdAt        DateTime  @default(now())
}

model Post {
  id         String       @id @default(uuid())
  content    String
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  likesCount Int          @default(0)
  media      Post_Media[]
  likes      Like[]
  comments   Comment[]
  createdAt  DateTime     @default(now())
}

model Post_Media {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  media  String

  @@id([postId, media])
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
  createdAt DateTime @default(now())
}
